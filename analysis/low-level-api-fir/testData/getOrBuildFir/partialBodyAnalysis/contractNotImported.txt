KT element: KtValueArgument
KT element text:
block
FIR element: FirPropertyAccessExpressionImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
block#

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] contractNotImported.kt
    public final inline [ResolvedTo(ANNOTATION_ARGUMENTS)] [PartialBodyResolveStateKey=1(1/4) #1] fun foo([ResolvedTo(ANNOTATION_ARGUMENTS)] block: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [Contract description] <
            contract#(<L> = [ResolvedTo(RAW_FIR)] contract@fun [ResolvedTo(RAW_FIR)] <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                callsInPlace#(block#, InvocationKind#.EXACTLY_ONCE#)
            }
            )
        >
     {
         {
            contract#(<L> = [ResolvedTo(RAW_FIR)] contract@fun [ResolvedTo(RAW_FIR)] <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                callsInPlace#(block#, InvocationKind#.EXACTLY_ONCE#)
            }
            )
        }

        before#()
        block#()
        after#()
    }
    public? final? [ResolvedTo(RAW_FIR)] fun before(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun after(): R|kotlin/Unit| { LAZY_BLOCK }

=====

KT element: KtCallExpression
KT element text:
block()
FIR element: FirImplicitInvokeCallImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] contractNotImported.kt
    public final inline [ResolvedTo(ANNOTATION_ARGUMENTS)] [PartialBodyResolveStateKey=3(3/4) #2] fun foo([ResolvedTo(ANNOTATION_ARGUMENTS)] block: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [Contract description] <
            contract#(<L> = [ResolvedTo(RAW_FIR)] contract@fun [ResolvedTo(RAW_FIR)] <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                callsInPlace#(block#, InvocationKind#.EXACTLY_ONCE#)
            }
            )
        >
     {
         {
            contract#(<L> = [ResolvedTo(RAW_FIR)] contract@fun [ResolvedTo(RAW_FIR)] <implicit>.<anonymous>(): <implicit> <inline=Unknown>  {
                callsInPlace#(block#, InvocationKind#.EXACTLY_ONCE#)
            }
            )
        }

        R|/before|()
        R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
        after#()
    }
    public final [ResolvedTo(CONTRACTS)] fun before(): R|kotlin/Unit| {
    }
    public? final? [ResolvedTo(RAW_FIR)] fun after(): R|kotlin/Unit| { LAZY_BLOCK }
