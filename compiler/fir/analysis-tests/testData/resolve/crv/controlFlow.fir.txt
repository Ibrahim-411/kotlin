FILE: controlFlow.kt
    public final fun stringF(): R|kotlin/String| {
        ^stringF String()
    }
    public final fun intF(): R|kotlin/Int| {
        ^intF Int(10)
    }
    public final fun unitF(): R|kotlin/Unit| {
        ^unitF Q|kotlin/Unit|
    }
    public final fun nsf(): R|kotlin/String?| {
        ^nsf String(null)
    }
    public final fun ifCondition(): R|kotlin/Unit| {
        CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0)))
        lval y: R|kotlin/Boolean| = CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0)))
        when () {
            CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0))) ->  {
                Q|kotlin/Unit|
            }
            else ->  {
                Q|kotlin/Unit|
            }
        }

        R|kotlin/io/println|(CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0))))
    }
    public final fun whenCondition(): R|kotlin/Unit| {
        when (R|/intF|()) {
            ==($subj$, Int(0)) ->  {
                Q|kotlin/Unit|
            }
        }

        when (lval x: R|kotlin/Int| = R|/intF|()) {
            ==($subj$, Int(0)) ->  {
                R|<local>/x|
            }
        }

        when (R|/intF|()) {
            ==($subj$, R|/intF|()) ->  {
                Q|kotlin/Unit|
            }
        }

        when (R|/intF|()) {
            ==($subj$, R|/intF|()) ->  {
                R|/intF|()
            }
        }

    }
    public final fun ifBranches(): R|kotlin/Unit| {
        lval x: R|kotlin/Int| = when () {
            CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0))) ->  {
                R|/intF|()
            }
            else ->  {
                Int(0)
            }
        }

        when () {
            CMP(>, R|/intF|().R|kotlin/Int.compareTo|(Int(0))) ->  {
                R|/intF|()
            }
            else ->  {
                Int(0)
            }
        }

    }
    public final fun ifBranches2(cond: R|kotlin/Boolean|): R|kotlin/String?| {
        ^ifBranches2 when () {
            R|<local>/cond| ->  {
                lval x: R|kotlin/Int| = R|/intF|()
                R|/stringF|()
            }
            else ->  {
                R|/intF|()
                R|/nsf|()
            }
        }

        when () {
            R|<local>/cond| ->  {
                R|/stringF|()
            }
            else ->  {
                R|/nsf|()
            }
        }

    }
    public final fun tryCatch(): R|kotlin/Unit| {
        lval x: R|kotlin/String?| = try {
            R|/nsf|()
        }
        catch (e: R|{kotlin/Exception=} java/lang/Exception|) {
            String(x)
        }
        finally {
            R|/stringF|()
        }

        try {
            R|/stringF|()
        }
        catch (e: R|{kotlin/Exception=} java/lang/Exception|) {
            R|/nsf|()
        }

    }
    public final fun typicalError(cond: R|kotlin/Boolean|): R|kotlin/String| {
        when () {
            R|<local>/cond| ->  {
                R|/nsf|()
            }
            else ->  {
                ^typicalError R|/stringF|()
            }
        }

        ^typicalError String(default)
    }
