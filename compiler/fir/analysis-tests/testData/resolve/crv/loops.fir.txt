FILE: loops.kt
    public final fun getAny(): R|kotlin/Any| {
        ^getAny Boolean(true)
    }
    public final fun whileLoop(): R|kotlin/Unit| {
        lvar cur: R|kotlin/Int| = Int(10)
        while(CMP(>=, R|<local>/cur|.R|kotlin/Int.compareTo|(Int(0)))) {
             {
                lval <unary>: R|kotlin/Int| = R|<local>/cur|
                R|<local>/cur| = R|<local>/<unary>|.R|kotlin/Int.dec|()
                R|<local>/<unary>|
            }

        }

        while((R|/getAny|() as R|kotlin/Boolean|)) {
             {
                lval <unary>: R|kotlin/Int| = R|<local>/cur|
                R|<local>/cur| = R|<local>/<unary>|.R|kotlin/Int.dec|()
                R|<local>/<unary>|
            }

        }

    }
    public final fun inOperator(c: R|kotlin/Char|, vararg cs: R|kotlin/CharArray|): R|kotlin/Unit| {
        lvar cur: R|kotlin/Int| = Int(10)
        R|<local>/cs|.R|kotlin/collections/contains|(R|<local>/c|)
        lval z: R|kotlin/Boolean| = R|<local>/cs|.R|kotlin/collections/contains|(R|<local>/c|)
        do {
             {
                lval <unary>: R|kotlin/Int| = R|<local>/cur|
                R|<local>/cur| = R|<local>/<unary>|.R|kotlin/Int.dec|()
                R|<local>/<unary>|
            }

        }
        while(CMP(>=, R|<local>/cur|.R|kotlin/Int.compareTo|(Int(0))) && R|<local>/cs|.R|kotlin/collections/contains|(R|<local>/c|))
    }
    public final fun forLoop(): R|kotlin/Unit| {
        lval cs: R|kotlin/collections/List<kotlin/Char>| = R|kotlin/collections/listOf|<R|kotlin/Char|>(vararg(Char(a), Char(b), Char(c)))
         {
            lval <iterator>: R|kotlin/collections/Iterator<kotlin/Char>| = R|<local>/cs|.R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<kotlin/Char>|>|()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                lval c: R|kotlin/Char| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|kotlin/Char|>|()
                 {
                    R|<local>/c|
                }

            }

        }

         {
            lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(10)).R|kotlin/ranges/IntProgression.iterator|()
            while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                 {
                    R|<local>/i|.R|kotlin/Int.plus|(Int(1))
                }

            }

        }

    }
